#!/bin/bash

# Check if the script is being run by root
if [ "$EUID" -eq 0 ]; then
  echo "This script should not be run as root"
  exit 1
fi

# Help menu
help_menu() {
  cat << EOF
Usage: $(basena $0) [OPTION]...

Options:
  h,-h,help,--help   Display this help menu.
  p,pass             Get a password.
  u,user             Get a username.
  t,totp             Get a TOTP.

EOF
}

# our working directory for everything
cd "${HOME}/secrets"

# Find a all directories with $1 file
function find_dirs_with() {
  fd -t f "$1" -x dirname {}
}

# Pick from a set of inputs; $1 (if provided) is appended to the result.
# Often you want to show results without the noise of the full path
# (including the file name), so this will display without, and append
# afterwards: e.g.   echo foo | pick "foo" will display ./ but return ./foo
function pick() {
  local result=$(fzf)
  if [ -z "$result" ]; then
    echo "no selection made"
    exit 1
  fi
  [[ -n "$1" ]] && echo "${result}/$1" || echo "$result"
}

# Copy to clipboard; $1 is a simple string to provide context to the message
function copy() {
  tr -d '[:space:]' | xclip -selection clipboard
  echo "$1 copied!"
}

# Grab an item from a file -- e.g. pass:<<THIS>>; $1 is the line 'name' (e.g. 'pass').
function item() {
  xargs grep "$1" | cut -d: -f2 | tr -d '[:space:]'
}

# Generate a TOTP. It uses the key and optional outlen keys from the provided file:
#   key:ABC...
#   outlen:6
# Outlet dictates the output length of the OTP. If not specified, it defaults to 6.
function totp() {
  read -r path
  local len=`echo "$path" | item "outlen"`
  oathtool --totp -b -d ${len:-6} "`echo $path | item 'key'`"
}

# Function to select directory with FZF.
select_directory() {
  local result=$(ls -d "${HOME}/secrets"/* | fzf)
  if [ -z "$result" ]; then
    echo "no selection made"
    exit 1
  fi
  echo "$result"
}

# Function to grep credentials
grep_creds() {
  local P=$(select_directory)
  if ! grep -q "$1" "${P}/creds"; then
    echo "$1 doesn't exist in ${P}/creds"
    exit 1
  fi
  grep "$1" "${P}/creds" | cut -d: -f2- | tr -d '[:space:]' | xclip -selection clipboard
  echo "$1 copied"
}

# Check if no arguments were passed
if [ $# -eq 0 ]; then
  help_menu
  exit 1
fi

# Route arguments via a switch
case "$1" in
  p|pass) grep_creds "pass";;
  u|user) grep_creds "user";;
  t|totp) find_dirs_with "totp" | pick "totp" | totp | copy "key";;
  h|help|-h|--help) help_menu;;
  *) echo "Invalid option: $1"
     help_menu
     exit 1
     ;;
esac
