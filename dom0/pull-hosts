#!/usr/bin/python3

import json
from json import JSONDecodeError
import subprocess
import re
from os.path import join, isdir
from getpass import getuser
from ipaddress import IPv4Address
from sys import exit

def pull(domu, hostnames):
    command="dig +short {}".format(' '.join(hostnames))
    output = subprocess.check_output(
        "qvm-run --pass-io {} \'{}\'".format(domu, command),
        shell=True
    )
    decoded = output.decode("utf=8")
    delineated = decoded.split("\n")
    res = sorted(list(filter(None, delineated)))
    return res

def msg(msg_type):
    colour = {
                'reset': '\033[0m', # reset
                'info': '\033[0m', # reset
                'error': '\033[31m', # red
                'success': '\033[33m', # green
            }

    def _(msg):
        print("{}{}{}".format(colour[msg_type], msg, colour['reset']))
    
    return _

def validate_ipv4(ips, msg_handler):
    for ip in ips:
        try:
            IPv4Address(ip)
        except AddressValueError as e:
            msg_handler("error")("invalid IPv4 address")

def get_config(print_error=msg("error")):
    with open("/etc/scripts/hosts.json", "r") as f:
        try:
            return json.load(f)
        except JSONDecodeError as e:
            print_error("The config file is invalid JSON")
            raise e

def write_file(values, file_path):
    with open(file_path, "w+") as f:
        f.write("\n".join(values))
        f.write("\n")

def do(pull, domu, hostnames, descrip, out_file, msg_handler, write_file, validate_ips):
    values = pull(
            domu=domu,
            hostnames=hostnames)
    
    validate_ips(values, msg_handler)

    write_file(values, out_file)

    message = "pulled {} {} from {}".format(len(values), descrip, domu)
    if len(values) == 0:
        msg_handler("error")(message)
    else:
        msg_handler("info")(message)

conf = get_config()

# make output dir
if not isdir(conf["dom0_out_root"]):
    subprocess.check_call([
            "sudo", "mkdir", "--parents", conf["dom0_out_root"]
        ])

    uname_group = "{}:{}".format(getuser(), getuser())
    subprocess.check_call([
        "sudo", "chown", uname_group, conf["dom0_out_root"]
        ])

for job in conf["jobs"]:
    do(pull=pull,
        domu=conf["delegate_domu"],
        hostnames=job["hostnames"],
        descrip=job["description"],
        out_file=join(conf["dom0_out_root"], job["out_file_name"]),
        msg_handler=msg,
        write_file=write_file,
        validate_ips=validate_ipv4)

