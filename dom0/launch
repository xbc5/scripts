#!/bin/env python3
import os, sys, json, subprocess

"""
This is the format of MY_LAUNCHER_CONFIG:
{
  "arbitrary-name": {
    "domain": "mydomu",
    "domu-cmd": "anycommand",
  },
  "foo": {
    "domain": "mydomu2",
    "dom0-cmd": "anycommand",
    "input": "a-list-generator-piped-into-launcher"
  },
  {...}
}
The arbitrary-name is displayed in the launcher. Input is optional, and
generates a list that's then piped to the launcher.

dom0-cmd and domu-cmd are mutually exclusive. Remember to use qvm tools
for dom0 actions if necessary. For dom0 commands, if you don't specify
a domain, you can insert a {} into input, and the menu chosen domain will
go into there.
"""

try:
  conf_path = os.environ['MY_LAUNCHER_CONFIG']
except KeyError:
  p = "/etc/scripts/launcher.json"
  if not os.path.exists(p):
    print("You must set MY_LAUNCHER_CONFIG first.")
    sys.exit(1)
  conf_path = p


try:
  with open(conf_path, 'r') as f:
    file_data = json.load(f)
except IOError:
  print("The launcher config doesn't exist @ {}".format(conf_path))
  sys.exit(3)


keys = r'\\n'.join([s for s in file_data.keys()])  # "foo\nbar"


# you MUST doubly backslash \\n and raw string this
choice = subprocess.check_output(
  r"echo -e {} | launcher".format(keys),
  shell=True
)


if not choice:
  sys.exit(0)


choice = choice.decode("utf8").rstrip()  # b'foo\n' => 'foo'


launch_data = file_data.get(choice, None)
if not launch_data:
  print("Cannot find launch data for '{}'".format(choice))
  sys.exit(2)


input_ = launch_data.get("input", "qvm-ls --raw-list")


try:
  domain = launch_data["domain"]
except KeyError:
  domain = subprocess.check_output(
  r"{} | launcher".format(input_), shell=True
  ).decode("utf8").rstrip()


if not domain:
  print("You must either set a domain in the config file, or pick one.")
  sys.exit(6)


def get_cmd(d, domain):
  domu_cmd = d.get("domu-cmd", None)
  dom0_cmd = d.get("dom0-cmd", None)
  if domu_cmd == dom0_cmd:
    print("domu and dom0 commands must be mutually exclusive: (fix key: {}".format(choice))
    sys.exit(7)

  if domu_cmd:
    cmd = ["qvm-run", domain, domu_cmd]
  else:
    # cmd = dom0_cmd.format(domain)  # is str, needs shell=True
    cmd = list(filter(lambda v: v, dom0_cmd.format(domain).split(" ")))
  
  return cmd

  
cmd = get_cmd(launch_data, domain)
subprocess.check_call(cmd)
